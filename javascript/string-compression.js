var compress = function (chars) {
  let count = 1,
    s = "";

  let charsLength = chars.length;

  for (let i = 0; i < charsLength; i++) {
    if (i + 1 < charsLength && chars[i] == chars[i + 1]) {
      count++;
    } else {
      if (s[s.length - 1] != chars[i]) continue;
      s = "";
      s = chars[i] + count;
      chars.splice(i - count + 1, ...s.split(""));
      i -= count - s.length;
      count = 0;
    }
  }

  console.log(chars);

  return chars.length;
};

console.log(
  compress([
    "t",
    "L",
    "L",
    "L",
    "[",
    "t",
    "t",
    "t",
    "v",
    "j",
    "j",
    "h",
    "{",
    "{",
    "E",
    "l",
    "l",
    "~",
    "~",
    "l",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "\\",
    "3",
    "1",
    ">",
    ">",
    "r",
    "r",
    "l",
    "K",
    "K",
    "K",
    "j",
    "j",
    "n",
    "n",
    ".",
    "V",
    "9",
    "9",
    "9",
    "g",
    "4",
    "b",
    "b",
    "b",
    "b",
    "v",
    "v",
    "v",
    "D",
    "{",
    "4",
    "R",
    "R",
    "R",
    "[",
    "D",
    "D",
    "D",
    "D",
    "D",
    "{",
    "{",
    "M",
    "M",
    "c",
    "c",
    "c",
    "c",
    "N",
    "y",
    "y",
    "=",
    "=",
    "m",
    "7",
    "7",
    "7",
    "7",
    "*",
    "*",
    "f",
    "f",
    "f",
    "f",
    "f",
    "5",
    "K",
    "K",
    "@",
    "b",
    "(",
    "(",
    "(",
    "`",
    "h",
    "h",
    "K",
    "Y",
    "M",
    "M",
    "-",
    "-",
    "2",
    "2",
    "K",
    ".",
    "F",
    "F",
    "F",
    "w",
    "w",
    "R",
    "p",
    "p",
    "H",
    "R",
    "u",
    "u",
    "W",
    "R",
    "~",
    "#",
    "T",
    "T",
    "T",
    "T",
    "C",
    "C",
    "u",
    "H",
    "H",
    "4",
    "I",
    "\\",
    "\\",
    "\\",
    "\\",
    "b",
    "b",
    "h",
    "S",
    "S",
    "(",
    "(",
    "]",
    "]",
    "(",
    "(",
    "J",
    "J",
    "J",
    "U",
    "U",
    "U",
    "U",
    "J",
    "J",
    "}",
    "x",
    "s",
    "s",
    "a",
    "a",
    "@",
    ">",
    "~",
    "~",
    "~",
    "Z",
    "A",
    "A",
    "t",
    "G",
    "-",
    "o",
    "V",
    "V",
    "7",
    "7",
    "q",
    "q",
    "q",
    "q",
    "q",
    "|",
    "j",
    "j",
    "I",
    "D",
    "}",
    "}",
    "}",
    "}",
    "&",
    "M",
    "M",
    ")",
    "(",
    "(",
    "(",
    "#",
    "c",
    "c",
    "c",
    "c",
    "c",
    "c",
    "c",
    "c",
    "j",
    "b",
    "0",
    "8",
    "8",
    "8",
    "p",
    "\\",
    "\\",
    "t",
    "a",
    "a",
    "=",
    "=",
    "v",
    "M",
    "2",
    "2",
    "2",
    "=",
    "=",
    "=",
    "=",
    "=",
    "=",
    "=",
    "=",
    "=",
    "J",
    "J",
    "8",
    "8",
    "8",
    "c",
    "|",
    "D",
    "r",
    "3",
    "3",
    "1",
    "1",
    "1",
    "Q",
    "Q",
    "Q",
    "Q",
    "Q",
    "J",
    "J",
    "J",
    "J",
    "a",
    "v",
    "O",
    "+",
    "+",
    "+",
    "+",
    "2",
    "2",
    "2",
    "i",
    "I",
    "I",
    "I",
    "&",
    "h",
    "h",
    "L",
    "U",
    "B",
    "e",
    ".",
    ".",
    ".",
    "x",
    "x",
    "x",
    "x",
    "G",
    ";",
  ])
);

// chars is an array of chars
// consecutive repeating characters.
// append to s, string, if grpus length is 1.
// ELSE , append character followed by groups length.

// s should not be returned separately.
// but stored in the input char array.
